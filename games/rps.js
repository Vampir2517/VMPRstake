"use strict";

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.VMPR.currentPageScript = {
    init: function() {
        console.log('RPS game initialized.');
        const rpsChoiceButtons = document.querySelectorAll('#game-rps-content .choice-btn');
        const rpsResultText = document.getElementById('rps-result-text');
        const rpsBetAmountElement = document.getElementById('rps-bet-amount');

        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ global VMPR –æ–±—ä–µ–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        const tg = window.VMPR.tg;
        const tonConnectUI = window.VMPR.tonConnectUI;
        const userBalance = window.VMPR.userBalance; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        const stakeAmount = window.VMPR.stakeAmount;
        const updateBalanceUI = window.VMPR.updateBalanceUI;
        const addHistoryEntry = window.VMPR.addHistoryEntry;

        rpsBetAmountElement.textContent = stakeAmount.toFixed(2);

        rpsChoiceButtons.forEach(button => {
            button.addEventListener('click', async () => {
                // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∏–≥—Ä–æ–π
                if (!tonConnectUI.connected) {
                    tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ TON –¥–ª—è –∏–≥—Ä—ã!');
                    return;
                }
                if (window.VMPR.userBalance < stakeAmount) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ VMPR
                    tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!');
                    return;
                }

                const playerChoice = button.getAttribute('data-choice');
                rpsResultText.textContent = "–ò–≥—Ä–∞–µ–º...";
                rpsResultText.style.color = 'var(--text-color)';

                // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –ª–æ–≥–∏–∫–∏ (–ù–ï–ë–ï–ó–û–ü–ê–°–ù–û –î–õ–Ø –†–ï–ê–õ–¨–ù–´–• –°–¢–ê–í–û–ö)
                setTimeout(() => {
                    const choices = ['rock', 'scissors', 'paper'];
                    const botChoice = choices[Math.floor(Math.random() * choices.length)];

                    let result;
                    let outcomeType = 'draw';
                    if (playerChoice === botChoice) {
                        result = "–ù–∏—á—å—è!";
                    } else if (
                        (playerChoice === 'rock' && botChoice === 'scissors') ||
                        (playerChoice === 'scissors' && botChoice === 'paper') ||
                        (playerChoice === 'paper' && botChoice === 'rock')
                    ) {
                        result = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª!";
                        outcomeType = 'win';
                        window.VMPR.userBalance += stakeAmount; // –¢–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    } else {
                        result = "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª";
                        outcomeType = 'loss';
                        window.VMPR.userBalance -= stakeAmount; // –¢–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    }

                    rpsResultText.textContent = `${result} –ë–æ—Ç –≤—ã–±—Ä–∞–ª ${getEmoji(botChoice)}.`;
                    rpsResultText.style.color = `var(--${outcomeType}-color)`;
                    updateBalanceUI(); // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ UI
                    addHistoryEntry(`–ö–ù–ë | –°—Ç–∞–≤–∫–∞: ${stakeAmount.toFixed(2)} TON | ${result}`, outcomeType);
                }, 1000); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
            });
        });

        function getEmoji(choice) {
            switch (choice) {
                case 'rock': return 'ü™®';
                case 'scissors': return '‚úÇÔ∏è';
                case 'paper': return 'üìÑ';
                default: return '';
            }
        }
    },
    cleanup: function() {
        console.log('RPS game cleaned up.');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç —É–±—Ä–∞–Ω—ã GC
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –¥–æ–±–∞–≤–ª—è–ª–∏ –∏—Ö –Ω–µ —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    }
};