"use strict"; // –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º

document.addEventListener('DOMContentLoaded', () => {
    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App ---
    const tg = window.Telegram.WebApp;
    tg.expand(); // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    tg.ready();  // –°–æ–æ–±—â–∞–µ–º Telegram, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON Connect SDK ---
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ manifestUrl —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞!
    const tonConnectUI = new TON_CONNECT_SDK.TonConnectUI({
        manifestUrl: 'https://vampir2517.github.io/VMPRstake/tonconnect-manifest.json',
        buttonRootId: 'ton-connect-btn-container' // SDK —Å–∞–º –≤—Å—Ç–∞–≤–∏—Ç –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å—é–¥–∞
    });

    // --- –≠–ª–µ–º–µ–Ω—Ç—ã UI ---
    const usernameElement = document.getElementById('username');
    const balanceElement = document.getElementById('balance-amount');
    const historyList = document.getElementById('history-list');

    // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏) ---
    let userBalance = 0.00; // –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Å –±–ª–æ–∫—á–µ–π–Ω–∞
    const stakeAmount = 1.00; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

    // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ UI ---
    function updateBalanceUI() {
        balanceElement.textContent = userBalance.toFixed(2);
    }

    // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é ---
    function addHistoryEntry(text, type = 'info') {
        const listItem = document.createElement('li');
        listItem.textContent = text;
        if (type === 'win') {
            listItem.classList.add('win');
        } else if (type === 'loss') {
            listItem.classList.add('loss');
        } else if (type === 'draw') {
            listItem.classList.add('draw');
        }
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        historyList.prepend(listItem);
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 10)
        while (historyList.children.length > 10) {
            historyList.removeChild(historyList.lastChild);
        }
    }

    // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏/–æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ TON ---
    tonConnectUI.onStatusChange(async (walletInfo) => {
        if (walletInfo) {
            // –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω
            const address = walletInfo.account.address;
            const shortAddress = `${address.slice(0, 4)}...${address.slice(-4)}`; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω–Ω—ã–π –ª–∏—Ç–µ—Ä–∞–ª
            usernameElement.textContent = shortAddress; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å

            // --- –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ TON —Å –±–ª–æ–∫—á–µ–π–Ω–∞ ---
            // –í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π API-–∫–ª—é—á –æ—Ç TonAPI (tonapi.io)
            // –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤–º–µ—Å—Ç–æ '–í–ê–®_TONAPI_–ö–õ–Æ–ß'. –ë–µ–∑ –∫–ª—é—á–∞ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.
            const TONAPI_KEY = ''; // –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ Canvas –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∏–Ω–∞—á–µ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–ª—é—á.

            if (!TONAPI_KEY) {
                console.warn('–í–ù–ò–ú–ê–ù–ò–ï: TONAPI_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è.');
                tg.showAlert('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ TONAPI_KEY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
            }

            const headers = TONAPI_KEY ? { 'Authorization': `Bearer ${TONAPI_KEY}` } : {};

            try {
                const response = await fetch(`https://tonapi.io/v2/accounts/${address}`, { headers });
                if (!response.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ TonAPI: ${response.statusText}`);
                }
                const data = await response.json();
                if (data && data.balance) {
                    const balanceNano = BigInt(data.balance); // –ë–∞–ª–∞–Ω—Å –≤ –Ω–∞–Ω–æ—Ç–æ–Ω–∞—Ö
                    userBalance = Number(balanceNano) / 1_000_000_000; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TON
                    updateBalanceUI();
                    addHistoryEntry(`–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: ${shortAddress}`, 'info');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
                tg.showAlert(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error.message}`); // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ tg.showAlert –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                userBalance = 0.00; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
                updateBalanceUI();
            }

        } else {
            // –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω
            usernameElement.textContent = 'Vampir2615'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∏–∫
            userBalance = 0.00;
            updateBalanceUI();
            addHistoryEntry('–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω', 'info');
        }
    });

    // --- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫ ---
    const tabs = document.querySelectorAll('.tab');
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º querySelectorAll –¥–ª—è game-btn, —Ç–∞–∫ –∫–∞–∫ data-tab –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    const gameButtons = document.querySelectorAll('.game-btn[data-tab]');
    const backButtons = document.querySelectorAll('.back-btn');

    function showTab(tabId) {
        tabs.forEach(tab => {
            tab.classList.remove('active');
        });
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID –≤–∫–ª–∞–¥–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, 'main-tab' –¥–ª—è main
        const targetTab = document.getElementById(tabId + '-tab') || document.getElementById(tabId);
        if (targetTab) {
            targetTab.classList.add('active');
        }
    }

    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    showTab('main'); 

    gameButtons.forEach(button => {
        button.addEventListener('click', (event) => {
            // event.stopPropagation(); // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—Å–ø–ª—ã—Ç–∏–µ–º
            const tabId = button.getAttribute('data-tab');
            if (tabId) {
                showTab(tabId);
            }
        });
    });

    backButtons.forEach(button => {
        button.addEventListener('click', (event) => {
            // event.stopPropagation();
            showTab('main');
        });
    });

    // --- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã "–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞" (–ö–ù–ë) ---
    const rpsChoiceButtons = document.querySelectorAll('#game-rps-tab .choice-btn');
    const rpsResultText = document.getElementById('rps-result-text');
    const rpsBetAmountElement = document.getElementById('rps-bet-amount');
    rpsBetAmountElement.textContent = stakeAmount.toFixed(2); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞–≤–∫—É

    rpsChoiceButtons.forEach(button => {
        button.addEventListener('click', async () => {
            if (!tonConnectUI.connected) {
                tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ TON –¥–ª—è –∏–≥—Ä—ã!');
                return;
            }
            if (userBalance < stakeAmount) {
                tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!');
                return;
            }

            rpsResultText.textContent = "–ò–≥—Ä–∞–µ–º...";
            rpsResultText.style.color = 'var(--text-color)';

            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –ª–æ–≥–∏–∫–∏ (–ù–ï–ë–ï–ó–û–ü–ê–°–ù–û –î–õ–Ø –†–ï–ê–õ–¨–ù–´–• –°–¢–ê–í–û–ö)
            setTimeout(() => {
                const choices = ['rock', 'scissors', 'paper'];
                const botChoice = choices[Math.floor(Math.random() * choices.length)];
                const playerChoice = button.getAttribute('data-choice'); // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ –∑–¥–µ—Å—å

                let result;
                let outcomeType = 'draw';
                if (playerChoice === botChoice) {
                    result = "–ù–∏—á—å—è!";
                } else if (
                    (playerChoice === 'rock' && botChoice === 'scissors') ||
                    (playerChoice === 'scissors' && botChoice === 'paper') ||
                    (playerChoice === 'paper' && botChoice === 'rock')
                ) {
                    result = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª!";
                    outcomeType = 'win';
                    userBalance += stakeAmount; // –¢–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                } else {
                    result = "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª";
                    outcomeType = 'loss';
                    userBalance -= stakeAmount; // –¢–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                }

                rpsResultText.textContent = `${result} –ë–æ—Ç –≤—ã–±—Ä–∞–ª ${getEmoji(botChoice)}.`;
                rpsResultText.style.color = `var(--${outcomeType}-color)`;
                updateBalanceUI();
                addHistoryEntry(`–ö–ù–ë | –°—Ç–∞–≤–∫–∞: ${stakeAmount.toFixed(2)} TON | ${result}`, outcomeType);
            }, 1000); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
        });
    });

    function getEmoji(choice) {
        switch (choice) {
            case 'rock': return 'ü™®';
            case 'scissors': return '‚úÇÔ∏è';
            case 'paper': return 'üìÑ';
            default: return '';
        }
    }

    // --- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã "–ö–æ—Å—Ç–∏" ---
    const rollDiceBtn = document.getElementById('roll-dice-btn');
    const playerDiceEl = document.getElementById('player-dice');
    const botDiceEl = document.getElementById('bot-dice');
    const diceResultText = document.getElementById('dice-result-text');
    const diceBetAmountElement = document.getElementById('dice-bet-amount');
    diceBetAmountElement.textContent = stakeAmount.toFixed(2); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞–≤–∫—É

    rollDiceBtn.addEventListener('click', () => {
        if (!tonConnectUI.connected) {
            tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ TON –¥–ª—è –∏–≥—Ä—ã!');
            return;
        }
        if (userBalance < stakeAmount) {
            tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!');
            return;
        }

        diceResultText.textContent = "";
        diceResultText.style.color = 'var(--text-color)';
        playerDiceEl.textContent = '?';
        botDiceEl.textContent = '?';

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –ª–æ–≥–∏–∫–∏ (–ù–ï–ë–ï–ó–û–ü–ê–°–ù–û –î–õ–Ø –†–ï–ê–õ–¨–ù–´–• –°–¢–ê–í–û–ö)
        let playerRoll, botRoll;
        let rollCount = 0;
        const maxRolls = 15; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "–ø–µ—Ä–µ–±—Ä–æ—Å–æ–≤" –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏

        const interval = setInterval(() => {
            playerRoll = Math.floor(Math.random() * 6) + 1;
            botRoll = Math.floor(Math.random() * 6) + 1;
            playerDiceEl.textContent = playerRoll;
            botDiceEl.textContent = botRoll;
            rollCount++;
            if (rollCount >= maxRolls) {
                clearInterval(interval);
                // –§–∏–Ω–∞–ª—å–Ω—ã–π –±—Ä–æ—Å–æ–∫ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                playerRoll = Math.floor(Math.random() * 6) + 1;
                botRoll = Math.floor(Math.random() * 6) + 1;
                playerDiceEl.textContent = playerRoll;
                botDiceEl.textContent = botRoll;

                let result;
                let outcomeType = 'draw';
                if (playerRoll > botRoll) {
                    result = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª!";
                    outcomeType = 'win';
                    userBalance += stakeAmount; // –¢–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                } else if (botRoll > playerRoll) {
                    result = "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª";
                    outcomeType = 'loss';
                    userBalance -= stakeAmount; // –¢–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                } else {
                    result = "–ù–∏—á—å—è!";
                    outcomeType = 'draw';
                }
                diceResultText.textContent = result;
                diceResultText.style.color = `var(--${outcomeType}-color)`;
                updateBalanceUI();
                addHistoryEntry(`–ö–æ—Å—Ç–∏ | –°—Ç–∞–≤–∫–∞: ${stakeAmount.toFixed(2)} TON | ${result}`, outcomeType);
            }
        }, 100); // –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
    });
});