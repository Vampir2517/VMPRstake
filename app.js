document.addEventListener('DOMContentLoaded', () => {
    // --- –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    const tg = window.Telegram.WebApp;
    tg.expand();

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON Connect ---
    const tonConnectUI = new TON_CONNECT_SDK.TonConnectUI({
        manifestUrl: 'https://VAMPIR2615.github.io/vmpr-stake/tonconnect-manifest.json', // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é —Å—Å—ã–ª–∫—É!
        buttonRootId: 'ton-connect-btn-container' // –ú—ã —Å–æ–∑–¥–∞–¥–∏–º —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    });

    // --- –≠–ª–µ–º–µ–Ω—Ç—ã UI ---
    const balanceElement = document.getElementById('balance-amount');
    const connectButton = document.getElementById('ton-connect-btn');
    const usernameElement = document.getElementById('username');
    
    // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏/–æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ ---
    tonConnectUI.onStatusChange(walletInfo => {
        if (walletInfo) {
            // –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω
            const address = walletInfo.account.address;
            const shortAddress = `${address.slice(0, 4)}...${address.slice(-4)}`;
            usernameElement.textContent = shortAddress; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏
            connectButton.textContent = 'üì§'; // –ö–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏"
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å, –Ω–æ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø. –ª–æ–≥–∏–∫–∏
        } else {
            // –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω
            usernameElement.textContent = 'Vampir2615'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∏–∫
            connectButton.textContent = '‚ûï'; // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å"
            balanceElement.textContent = '0.00';
        }
    });
    
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –Ω–∞—à—É –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–Ω–æ–ø–∫—É
    connectButton.addEventListener('click', () => {
        if (tonConnectUI.connected) {
            tonConnectUI.disconnect();
        } else {
            tonConnectUI.openModal();
        }
    });


    // --- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    const tabs = document.querySelectorAll('.tab');
    const gameButtons = document.querySelectorAll('.game-btn[data-tab]');
    const backButtons = document.querySelectorAll('.back-btn');

    function showTab(tabId) {
        tabs.forEach(tab => {
            tab.classList.remove('active');
        });
        const targetTab = document.getElementById(tabId + '-tab') || document.getElementById(tabId);
        if (targetTab) {
            targetTab.classList.add('active');
        }
    }

    gameButtons.forEach(button => {
        button.addEventListener('click', () => {
            const tabId = button.getAttribute('data-tab');
            if (tabId) {
                showTab(tabId);
            }
        });
    });

    backButtons.forEach(button => {
        button.addEventListener('click', () => {
            showTab('main');
        });
    });

    // --- –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã "–ö–æ—Å—Ç–∏" (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    const rollDiceBtn = document.getElementById('roll-dice-btn');
    const playerDiceEl = document.getElementById('player-dice');
    const botDiceEl = document.getElementById('bot-dice');
    const diceResultText = document.querySelector('#game-dice-tab .result-text');

    rollDiceBtn.addEventListener('click', () => {
        diceResultText.textContent = "";
        let playerRoll, botRoll;
        const interval = setInterval(() => {
            playerRoll = Math.floor(Math.random() * 6) + 1;
            botRoll = Math.floor(Math.random() * 6) + 1;
            playerDiceEl.textContent = playerRoll;
            botDiceEl.textContent = botRoll;
        }, 100);

        setTimeout(() => {
            clearInterval(interval);
            playerRoll = Math.floor(Math.random() * 6) + 1;
            botRoll = Math.floor(Math.random() * 6) + 1;
            playerDiceEl.textContent = playerRoll;
            botDiceEl.textContent = botRoll;

            if (playerRoll > botRoll) {
                diceResultText.textContent = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª!";
                diceResultText.style.color = 'var(--win)';
            } else if (botRoll > playerRoll) {
                diceResultText.textContent = "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª";
                diceResultText.style.color = 'var(--loss)';
            } else {
                diceResultText.textContent = "–ù–∏—á—å—è!";
                diceResultText.style.color = 'var(--text-color)';
            }
        }, 1000);
    });
});