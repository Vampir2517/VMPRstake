"use strict";

window.VMPR.currentPageScript = {
    init: function() {
        console.log('RPS game initialized.');
        const rpsChoiceButtons = document.querySelectorAll('#game-rps-content .choice-btn');
        const rpsResultText = document.getElementById('rps-result-text');
        const rpsBetAmountElement = document.getElementById('rps-bet-amount');

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ VMPR
        const tg = window.VMPR.tg;
        const tonConnectUI = window.VMPR.tonConnectUI;
        const stakeAmount = window.VMPR.stakeAmount;
        const updateBalanceUI = window.VMPR.updateBalanceUI;
        const addHistoryEntry = window.VMPR.addHistoryEntry;

        rpsBetAmountElement.textContent = stakeAmount.toFixed(2);

        rpsChoiceButtons.forEach(button => {
            button.addEventListener('click', async () => {
                if (!tonConnectUI.connected) {
                    tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ TON –¥–ª—è –∏–≥—Ä—ã!');
                    return;
                }
                if (window.VMPR.userBalance < stakeAmount) {
                    tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!');
                    return;
                }

                rpsResultText.textContent = "–ò–≥—Ä–∞–µ–º...";
                rpsResultText.style.color = 'var(--text-color)';

                setTimeout(() => {
                    const choices = ['rock', 'scissors', 'paper'];
                    const botChoice = choices[Math.floor(Math.random() * choices.length)];
                    const playerChoice = button.getAttribute('data-choice');

                    let result;
                    let outcomeType = 'draw';
                    if (playerChoice === botChoice) {
                        result = "–ù–∏—á—å—è!";
                    } else if (
                        (playerChoice === 'rock' && botChoice === 'scissors') ||
                        (playerChoice === 'scissors' && botChoice === 'paper') ||
                        (playerChoice === 'paper' && botChoice === 'rock')
                    ) {
                        result = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª!";
                        outcomeType = 'win';
                        window.VMPR.userBalance += stakeAmount;
                    } else {
                        result = "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª";
                        outcomeType = 'loss';
                        window.VMPR.userBalance -= stakeAmount;
                    }

                    rpsResultText.textContent = `${result} –ë–æ—Ç –≤—ã–±—Ä–∞–ª ${getEmoji(botChoice)}.`;
                    rpsResultText.style.color = `var(--${outcomeType}-color)`;
                    updateBalanceUI();
                    addHistoryEntry(`–ö–ù–ë | –°—Ç–∞–≤–∫–∞: ${stakeAmount.toFixed(2)} TON | ${result}`, outcomeType);
                }, 1000);
            });
        });

        function getEmoji(choice) {
            switch (choice) {
                case 'rock': return 'ü™®';
                case 'scissors': return '‚úÇÔ∏è';
                case 'paper': return 'üìÑ';
                default: return '';
            }
        }
    },
    cleanup: function() {
        console.log('RPS game cleaned up.');
        // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ button —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è,
        // –∫–æ–≥–¥–∞ —ç—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ DOM –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        // –ï—Å–ª–∏ –±—ã –≤—ã –¥–æ–±–∞–≤–ª—è–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ –∏–ª–∏ —Ç–∞–π–º–µ—Ä—ã, –∏—Ö –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –∑–¥–µ—Å—å –æ—á–∏—â–∞—Ç—å.
    }
};